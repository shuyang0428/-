# LC28 Find the Index of the First Occurrence in a String

# Sol 1 Brute force
class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        m,n = len(haystack),len(needle)
        for i in range(m):
            if haystack[i:i+n] == needle:
                return i
        return -1

# Sol 2 prefix table
class Solution:
    def getNext(self,next,s):
        j = 0
        next[0] = 0
        for i in range(1,len(s)):
            while s[i] != s[j] and j > 0:
                j = next[j-1]
            if s[i] == s[j]:
                j += 1
            next[i] = j

    def strStr(self, haystack: str, needle: str) -> int:
        if not needle:
            return 0
        
        next = [0]*len(needle)
        self.getNext(next,needle)

        j = 0
        for i in range(len(haystack)):
            while j > 0 and haystack[i] != needle[j]:
                j = next[j-1]
            if haystack[i] == needle[j]:
                j += 1
            if j == len(needle):
                return i - len(needle) + 1
        return -1

# Sol 3 find function
class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if needle == "" or len(needle) > len(haystack):
            return -1
        return haystack.find(needle)
