# LC226 Invert Binary Tree

# Sol 1 BFS
class Solution:
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        if not root:
            return root
        que = collections.deque([root])

        while que:
            n = len(que)
            for _ in range(n):
                node = que.popleft()
                node.left,node.right = node.right,node.left
                if node.left:
                    que.append(node.left)
                if node.right:
                    que.append(node.right)
        return root

# Sol 2 DFS Iteration Postorder
class Solution:
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        if not root:
            return None
        stack = []
        stack.append(root)

        while stack:
            node = stack.pop()
            if node.left:
                stack.append(node.left)
            if node.right:
                stack.append(node.right)
            node.left,node.right = node.right,node.left
        return root

# Sol 3 DFS Iteration Inorder
class Solution:
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        if not root:
            return None
        stack = [root]

        while stack:
            node = stack.pop()
            if node.left:
                stack.append(node.left)
            node.left,node.right = node.right,node.left
            if node.left:
                stack.append(node.left)
        return root

# Sol 4 DFS Iteration Preorder
class Solution:
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        if not root:
            return None
        stack = []
        stack.append(root)
        while stack:
            node = stack.pop()
            node.left,node.right = node.right,node.left
            if node.right:
                stack.append(node.right)
            if node.left:
                stack.append(node.left)
        return root

# Sol 5 DFS Postorder Recursion
class Solution:
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        if not root:
            return None
        self.invertTree(root.left)
        self.invertTree(root.right)
        root.left, root.right = root.right, root.left
        return root

# Sol 6 DFS Inorder Recursion
class Solution:
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        if not root:
            return None
        self.invertTree(root.left)
        root.left, root.right = root.right, root.left
        self.invertTree(root.left)
        return root

# Sol 7 DFS Preorder Recursion
class Solution:
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        if not root:
            return None
        root.left,root.right = root.right,root.left
        self.invertTree(root.left)
        self.invertTree(root.right)
        return root
