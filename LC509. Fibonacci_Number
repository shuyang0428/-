# LC 509 Fibonacci Number 

# Sol 1 DP Time:O(N) Space:O(N)
class Solution:
    def fib(self, n: int) -> int:
        if n <= 1:
            return n
        dp = [0] * (n + 1)
        dp[0] = 0
        dp[1] = 1

        for i in range(2,n + 1):
            dp[i] = dp[i-1] + dp[i-2]
        return dp[n]

# Sol 2 DP only maintain the first 2 element Time:O(N) Space:O(1)
class Solution:
    def fib(self, n: int) -> int:
        if n <= 1:
            return n

        dp = [0,1]
        for i in range(2,n+1):
            total = dp[0] + dp[1]
            dp[0] = dp[1]
            dp[1] = total
        return dp[1]

# Sol 3 Recursion Time:O(2^N) Space:O(n)
class Solution:
    def fib(self, n: int) -> int:
        if n <= 1:
            return n
        return self.fib(n-1) + self.fib(n-2)
