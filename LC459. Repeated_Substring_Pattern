# LC459 Repeated Substring Pattern

# Sol 1 Find Function
class Solution:
    def repeatedSubstringPattern(self, s: str) -> bool:
        if len(s)<=1:
            return False
        t = s[1:]+s[:-1]
        return t.find(s) != -1

# Sol 2 Brute Force Time complexity: O(n*n^0.5) Space complexity: O(n)
class Solution:
    def repeatedSubstringPattern(self, s: str) -> bool:
        if len(s) <= 1:
            return False
        substring = ''
        for i in range(1,len(s) // 2 + 1):
            if len(s) % i == 0:
                substring = s[:i]
                if substring * (len(s) // i) == s:
                    return True

        return False

# Sol 3 KMP
class Solution:
    def getNext(self,next,s):
        next[0] = 0
        j = 0
        for i in range(1,len(s)):
            while j > 0 and s[j] != s[i]:
                j = next[j-1]
            if s[j] == s[i]:
                j += 1
            next[i] = j

    def repeatedSubstringPattern(self, s: str) -> bool:
        n = len(s)
        if n <= 1:
            return False
        next = [0]*n
        self.getNext(next,s)
        if next[-1] != 0 and n % (n - next[-1]) == 0:
            return True
        return False     

# Sol 4 String Concatination Time Complexity: O(n) Space Complexity: O(n)
class Solution:
    def repeatedSubstringPattern(self, s: str) -> bool:
        t = s + s
        if s in t[1:-1]:
            return True
        return False
