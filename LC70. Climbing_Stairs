# LC70 Climbing Staris

# Sol 1 DP with only maintain the 2 elements Time:O(N) Space:O(3)
class Solution:
    def climbStairs(self, n: int) -> int:
        if n <= 2:
            return n
        dp = [0,1,2]

        for i in range(3,n+1):
            nextWay = dp[1] + dp[2]
            dp[1] = dp[2]
            dp[2] = nextWay
        return dp[2]

# Sol 2 DP Time:O(N) Space:O(N)
class Solution:
    def climbStairs(self, n: int) -> int:
        if n <= 2:
            return n
        dp = [0] * (n+1)
        dp[1],dp[2] = 1,2

        for i in range(3,n+1):
            dp[i] = dp[i-1] + dp[i-2]
        return dp[n]

# Sol 3 Time:O(N) Space:O(1)
class Solution:
    def climbStairs(self, n: int) -> int:
        if n <= 1:
            return n
        
        prev1 = 1
        prev2 = 2
        
        for i in range(3, n + 1):
            total = prev1 + prev2
            prev1 = prev2
            prev2 = total
        
        return prev2
