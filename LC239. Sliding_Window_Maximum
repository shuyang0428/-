# LC 239 Sliding Window Maximum

# Sol 1 Queue
class MyQueue:
    def __init__(self) -> None:
        self.queue = collections.deque()
    
    def pop(self,value):
        if self.queue and value == self.queue[0]:
            self.queue.popleft()
    
    def push(self,value):
        while self.queue and value > self.queue[-1]:
            self.queue.pop()
        self.queue.append(value)
    
    def front(self):
        return self.queue[0]

class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        que = MyQueue()
        res = []
        for i in range(k):
            que.push(nums[i])
        res.append(que.front())
        for i in range(k,len(nums)):
            que.pop(nums[i - k])    
            que.push(nums[i])
            res.append(que.front())
        return res

# Sol 2 Monotonic Deque
class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        dq = collections.deque()
        res = []

        for i in range(k):
            while dq and nums[i] >= nums[dq[-1]]:
                dq.pop()
            dq.append(i)
        res.append(nums[dq[0]])

        for i in range(k,len(nums)):
            if dq and dq[0] == i - k:
                dq.popleft()
            while dq and nums[i] >= nums[dq[-1]]:
                dq.pop()
            
            dq.append(i)
            res.append(nums[dq[0]])

        return res
