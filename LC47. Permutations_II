# LC47 Permutations II

# Sol 1 using used list to mark
class Solution:
    def backtracking(self,nums,used,path,res):
        if len(path) == len(nums):
            res.append(path[:])
            return
        for i in range(len(nums)):
            if (i > 0 and nums[i] == nums[i - 1] and used[i-1] == False):
                continue
            if not used[i]:
                used[i] = True
                path.append(nums[i])
                self.backtracking(nums,used,path,res)
                used[i] = False
                path.pop()

    def permuteUnique(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        path = []
        res = []
        used = [False] * len(nums)
        self.backtracking(nums,used,path,res)
        return res
        
