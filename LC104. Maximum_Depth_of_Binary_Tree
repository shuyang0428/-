# LC104 Maximum Depth of Binary Tree

# Sol 1 BFS Time Complexity: O(n) Space Complexity: O(log(n))
class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        if not root:
            return 0
        que = collections.deque([root])
        res = 0
        while que:
            n = len(que)
            for _ in range(n):
                node = que.popleft()
                if node.left:
                    que.append(node.left)
                if node.right:
                    que.append(node.right)
            res += 1
        return res

# Sol 2 DFS Recursion Time Complexity: O(n) Space Complexity: O(logN)
class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        if not root:
            return 0
        else:
            left_depth = self.maxDepth(root.left)
            right_depth = self.maxDepth(root.right)
            return max(left_depth,right_depth) + 1
