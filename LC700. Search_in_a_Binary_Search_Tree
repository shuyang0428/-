# LC700 Search in a Binary Search Tree

# Sol 1 DFS Preorder Recursion
class Solution:
    def searchBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:
        if not root or root.val == val:
            return root
        res = TreeNode(None)
        if root.val>val:
            res = self.searchBST(root.left,val)
        if root.val<val:
            res = self.searchBST(root.right,val)
        return res


# Sol 2 Iteration
因为二叉搜索树的特殊性，也就是节点的有序性，可以不使用辅助栈或者队列就可以写出迭代法。
对于一般二叉树，递归过程中还有回溯的过程，例如走一个左方向的分支走到头了，那么要调头，在走右分支。
而对于二叉搜索树，不需要回溯的过程，因为节点的有序性就帮我们确定了搜索的方向。
例如要搜索元素为3的节点，我们不需要搜索其他节点，也不需要做回溯，查找的路径已经规划好了。

class Solution:
    def searchBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:
        while root:
            if root.val>val:
                root = root.left
            elif root.val < val:
                root = root.right
            else:
                return root
        return None
