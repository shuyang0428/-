# LC59 Spiral Matrix II

# Sol 1
class Solution:
    def generateMatrix(self, n: int) -> List[List[int]]:
        ans =[[0]* n for _ in range(n)]
        row_start,col_start = 0,0
        row_end,col_end = n-1,n-1
        count = 1
        while row_start <= row_end and col_start <= col_end:
            for j in range(col_start,col_end + 1): # (0,3) -> 0,1,2
                ans[row_start][j] = count #[0][j]
                count += 1
            row_start += 1 # 1
            for i in range(row_start,row_end + 1): # (1,2) -> 1,2
                ans[i][col_end] = count # [i][2]
                count += 1
            col_end -= 1 # 1
            if row_start <= row_end:
                for j in range(col_end,col_start - 1,-1): # (1,-1) -> 1,0
                    ans[row_end][j] = count # [2][j]
                    count += 1
                row_end -= 1 # 1
            if col_start <= col_end:
                for i in range(row_end,row_start - 1,-1): # (1,0) -> 1
                    ans[i][col_start] = count
                    count += 1
                col_start += 1
        return ans

# Sol 2
class Solution:
    def generateMatrix(self, n: int) -> List[List[int]]:
        ans = [[0]*n for _ in range(n)]
        rowstart,rowend = 0,n-1
        colstart,colend = 0,n-1
        count = 1
        while rowstart <= rowend and colstart <= colend:
            for j in range(colstart,colend + 1): #(0,3) 0,1,2
                ans[rowstart][j] = count #[0][j]
                count += 1
            for i in range(rowstart + 1,rowend + 1): #(1,3) 1,2
                ans[i][colend] = count #[i][2]
                count += 1            
            for j in range(colend - 1,colstart - 1,-1): #(1,-1) 1,0
                ans[rowend][j] = count #[2][j]
                count += 1
            for i in range(rowend - 1,rowstart,-1): #(1,0)  1
                ans[i][colstart] = count
                count += 1
            colend -= 1    
            rowstart += 1    
            rowend -= 1
            colstart += 1
        return ans

# Sol 3
class Solution:
    def generateMatrix(self, n: int) -> List[List[int]]:
        ans =[[0]* n for _ in range(n)]
        startx,starty = 0,0
        loop,mid = n//2,n//2
        count = 1

        for offset in range(1,loop + 1):
            for j in range(starty,n - offset):
                ans[startx][j] = count
                count += 1
            for i in range(startx,n - offset):
                ans[i][n - offset] = count
                count += 1
            for j in range(n - offset, startx, -1):
                ans[n - offset][j] = count
                count += 1
            for i in range(n - offset, starty, -1):
                ans[i][starty] = count
                count += 1
            startx += 1
            starty += 1
        if n % 2 != 0:
            ans[mid][mid] = count
        return ans

        

        
