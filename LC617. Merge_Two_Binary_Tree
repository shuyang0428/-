# LC617 Merge Two Binary Tree

# Sol 1 DFS Preorder recursion
class Solution:
    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:
        if not root1:
            return root2
        if not root2:
            return root1
        
        newroot = TreeNode(root1.val + root2.val)
        left = self.mergeTrees(root1.left,root2.left)
        right = self.mergeTrees(root1.right,root2.right)

        newroot.left = left
        newroot.right = right

        return newroot

# Sol 2 DFS Inorder Recursion
class Solution:
    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:
        if not root1:
            return root2
        if not root2:
            return root1
        
        root1.left = self.mergeTrees(root1.left,root2.left)
        root1.val += root2.val
        root1.right = self.mergeTrees(root1.right,root2.right)

        return root1


# Sol 3 DFS Postorder Recursion
class Solution:
    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:
        if not root1:
            return root2
        if not root2:
            return root1
        
        root1.left = self.mergeTrees(root1.left,root2.left)
        root1.right = self.mergeTrees(root1.right,root2.right)
        root1.val += root2.val
        return root1
        
