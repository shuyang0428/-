# LC54 Spiral Matrix

# Sol 1
class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        ans = []
        if len(matrix) == 0:
            return ans
        rs,re = 0,len(matrix) - 1
        cs,ce = 0,len(matrix[0]) - 1
        while rs <= re and cs <= ce:
            for j in range(cs,ce + 1): 
                ans.append(matrix[rs][j])
            rs += 1
            for i in range(rs,re + 1): 
                ans.append(matrix[i][ce])
            ce -= 1
            if rs <= re:
                for j in range(ce,cs - 1,-1):
                    ans.append(matrix[re][j])
                re -= 1
            if cs <= ce:
                for i in range(re,rs - 1, -1):
                    ans.append(matrix[i][cs])
                cs += 1
        return ans

# Sol 2
class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        ans = []
        if len(matrix) == 0:
            return ans
        rs,re = 0,len(matrix) - 1
        cs,ce = 0,len(matrix[0]) - 1
        while rs <= re and cs <= ce:
            for j in range(cs,ce + 1):
                ans.append(matrix[rs][j])
            for i in range(rs + 1,re + 1):
                ans.append(matrix[i][ce])
            if rs < re:
                for j in range(ce - 1,cs - 1,-1):
                    ans.append(matrix[re][j])
            if cs < ce:
                for i in range(re - 1,rs, -1):
                    ans.append(matrix[i][cs])
            rs += 1
            re -= 1
            cs += 1
            ce -= 1
        return ans

# Sol 3
class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        VISITED = 101
        rows, columns = len(matrix), len(matrix[0])
        # Four directions that we will move: right, down, left, up.
        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
        # Initial direction: moving right.
        current_direction = 0
        # The number of times we change the direction.
        change_direction = 0
        # Current place that we are at is (row, col).
        # row is the row index; col is the column index.
        row = col = 0
        # Store the first element and mark it as visited.
        result = [matrix[0][0]]
        matrix[0][0] = VISITED

        while change_direction < 2:

            while True:
                # Calculate the next place that we will move to.
                next_row = row + directions[current_direction][0]
                next_col = col + directions[current_direction][1]

                # Break if the next step is out of bounds.
                if not (0 <= next_row < rows and 0 <= next_col < columns):
                    break
                # Break if the next step is on a visited cell.
                if matrix[next_row][next_col] == VISITED:
                    break

                # Reset this to 0 since we did not break and change the direction.
                change_direction = 0
                # Update our current position to the next step.
                row, col = next_row, next_col
                result.append(matrix[row][col])
                matrix[row][col] = VISITED

            # Change our direction.
            current_direction = (current_direction + 1) % 4
            # Increment change_direction because we changed our direction.
            change_direction += 1

        return result
