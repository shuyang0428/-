# LC131 Palindrome Partitioning

# Sol 
class Solution:
    def backtracking(self,s,idx,path,res):
        if idx == len(s):
            res.append(path[:])
            return
        for i in range(idx,len(s)):
            if s[idx:i+1] == s[idx:i+1][::-1]:
                path.append(s[idx:i+1])
                self.backtracking(s,i+1,path,res)
                path.pop()

    def partition(self, s: str) -> List[List[str]]:
        res = []
        self.backtracking(s,0,[],res)
        return res
