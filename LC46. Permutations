# LC46 Permutations

# Sol
class Solution:
    def backtracking(self,nums,path,res):
        if len(path) == len(nums):
            res.append(path[:])
            return
        for i in range(len(nums)):
            if nums[i] in path:
                continue
            path.append(nums[i])
            self.backtracking(nums,path,res)
            path.pop()

    def permute(self, nums: List[int]) -> List[List[int]]:
        res = []
        path = []
        self.backtracking(nums,path,res)
        return res
