# LC56 Merge Intervals

# Sol 1 Greedy
class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        if len(intervals) <= 1:
            return intervals

        intervals.sort(key = lambda x:x[0],reverse = False)

        res = []
        left,right = intervals[0][0],intervals[0][1]
        for interval in intervals:
            if interval[0] <= right:
                right = max(right,interval[1])
            elif interval[0] > right:
                res.append([left,right])
                left = interval[0]
                right = interval[1]
        res.append([left,right])
        return res

# Sol 2 Greedy
class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        intervals.sort(key = lambda x: x[0])

        merged = []

        for interval in intervals:
            if not merged or merged[-1][1] < interval[0]:
                merged.append(interval)
            else:
                merged[-1][1] = max(merged[-1][1],interval[1])
        return merged
